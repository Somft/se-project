@model ExBook.Models.Transactions.TransactionRatingViewModel

<div style="margin: 0 auto; margin-top: 30px; max-width: 400px">
    <form asp-controller="Transaction" 
          asp-action="Rating" 
          asp-route-transactionId=@Model.Transaction.Id
          method="post">


        <div class="form-group">
            <label for="Rating">Rating</label>
            <br/><div class='starrr'> </div>
            <input asp-for="Rating" class=@GetInputClass("Rating") type="number">
            <span asp-validation-for="Rating" class="invalid-feedback"></span>
        </div>

        <div class="form-group">
            <label for="Comments">Description</label>
            <textarea asp-for="Comments" class=@GetInputClass("Description") rows="3" maxlength="200"></textarea>
            <span asp-validation-for="Comments" class="invalid-feedback"></span>
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary btn-block" style="max-width: max-content"> Rate  </button>
        </div>
    </form>
</div>

@section Scripts
{
    <script>
        $('.starrr').starrr({
            rating: $("#Rating").val(),
            max: 10,
            emptyClass: 'far fa-star',
            fullClass: 'fas fa-star',
            change: function (e, value) {
                $("#Rating").val(value);
            }
        })


    </script>
}

<style>
    #Rating {
        visibility: hidden;
        margin: 0;
        padding: 0;
        max-height: 0;
    }
</style>

@functions {
    private string GetInputClass(string inputName)
    {
        string result = "form-control";

        if (this.ViewData.ModelState[inputName]?.ValidationState == Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid)
        {
            result += " is-invalid";
        }

        return result;
    }
}
